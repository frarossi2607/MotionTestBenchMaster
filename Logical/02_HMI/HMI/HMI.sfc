PROGRAM _CYCLIC
(* @LANGUAGE := 'sfc' *)
INITIAL_STEP HMIInit:
END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
TRANSITION FROM HMIInit TO InitCpu:=
TRUE
END_TRANSITION
(* @SFCNOJUMP := 'InitCpu' *)
STEP InitCpu:
(* @LANGUAGE := 'st' *)

END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
EXIT_ACTION
(* @LANGUAGE := 'st' *)
HMI_MachinePlcVersion := 'V4.AA.200.8.0';

//V4.A.A.1.6.13
VAR_SafetyVersionTemp := UINT_TO_USINT(swapUINT(PI.SwVer1));
itoa(VAR_SafetyVersionTemp, ADR(VAR_SafetyVersionData1));

VAR_SafetyVersionTemp := UINT_TO_USINT(PI.SwVer1);
itoa(VAR_SafetyVersionTemp, ADR(VAR_SafetyVersionData2));

VAR_SafetyVersionTemp := UINT_TO_USINT(swapUINT(PI.SwVer2));
itoa(VAR_SafetyVersionTemp, ADR(VAR_SafetyVersionData3));

VAR_SafetyVersionTemp :=  UINT_TO_USINT(PI.SwVer2);
itoa(VAR_SafetyVersionTemp, ADR(VAR_SafetyVersionData4));

strcat(ADR(HMI_MachineSafetyVersion), ADR('V'));
strcat(ADR(HMI_MachineSafetyVersion), ADR(VAR_SafetyVersionData1));
strcat(ADR(HMI_MachineSafetyVersion), ADR('.'));
strcat(ADR(HMI_MachineSafetyVersion), ADR(VAR_SafetyVersionData2));
strcat(ADR(HMI_MachineSafetyVersion), ADR('.'));
strcat(ADR(HMI_MachineSafetyVersion), ADR(VAR_SafetyVersionData3));
strcat(ADR(HMI_MachineSafetyVersion), ADR('.'));
strcat(ADR(HMI_MachineSafetyVersion), ADR(VAR_SafetyVersionData4));
END_ACTION
TRANSITION FROM InitCpu TO (ITCMng,CmdBar,CmdBar_GLASS,Counters,Various):=
CFG.DataOut.ConfigLoaded
END_TRANSITION
(* @SFCNOJUMP := 'ITCMng' *)
(* @SFCNOJUMP := 'CmdBar' *)
(* @SFCNOJUMP := 'CmdBar_GLASS' *)
(* @SFCNOJUMP := 'Counters' *)
(* @SFCNOJUMP := 'Various' *)
STEP ITCMng:
(* @LANGUAGE := 'st' *)
(* ITC *)
HMI_ITCMng;
END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
STEP CmdBar:
END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
STEP CmdBar_GLASS:
(* @LANGUAGE := 'st' *)
// Command Bar - Fixed Visibility and Partner Visibility 
HMI_CommandBar_Visibility_GLASS;
//
//	(* Command Bar - Command from HMI and Partner *)
HMI_CommandBar_Command_GLASS;
//	
//	(* Command Bar - Enable from PLC and Partner *)
HMI_CommandBar_Enable_GLASS;
//	
//	(* Command Bar - State from PLC and Partner *)
HMI_CommandBar_Status_GLASS;

END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
TRANSITION FROM CmdBar_GLASS TO CmdBar:=
FALSE
END_TRANSITION
(* @SFCISJUMP := 'CmdBar' *)
STEP Counters:
(* @LANGUAGE := 'st' *)
(* Counter *)
HMI_CounterMng;
END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
STEP Various:
(* @LANGUAGE := 'st' *)
HMI_SS2P[SS2P_HMI_DeviceEnable].Visibility	:= TRUE;
HMI_SS2P[SS2P_HMI_DeviceEnable].Enable		:= TRUE;
HMI_SS2P[SS2P_HMI_DeviceEnable].LampON		:= HMI_SS2P[SS2P_HMI_DeviceEnable].ON;

HMI_SS2P[SS2P_HMI_SelEnable].Visibility	:= TRUE;
HMI_SS2P[SS2P_HMI_SelEnable].Enable		:= TRUE;
HMI_SS2P[SS2P_HMI_SelEnable].LampON		:= HMI_SS2P[SS2P_HMI_SelEnable].ON;
	
(* HMI-PLC Communication WatchDog *)
TMR_TON_WatchDogOn(IN:= NOT HMI_WatchDog, PT := t#2s);
	
TMR_TON_WatchDogOff(IN:= HMI_WatchDog, PT := t#2s);
	
IF TMR_TON_WatchDogOn.Q THEN
	HMI_WatchDog := TRUE;
ELSIF TMR_TON_WatchDogOff.Q THEN
	HMI_WatchDog := FALSE;
END_IF
END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
TRANSITION FROM (ITCMng,CmdBar,Counters,Various) TO HMIInit:=
FALSE
END_TRANSITION
(* @SFCISJUMP := 'HMIInit' *)
END_PROGRAM
